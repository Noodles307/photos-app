// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TimeUnit {
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

enum Role {
  USER
  ADMIN
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String?
  password   String?
  createdAt  DateTime  @default(now())
  lastOnline DateTime?
  role       Role      @default(USER)
  inviteHash String?

  userRestrictions UserRestriction[]
  log              Log[]
}

model Restriction {
  id                  String                @id @default(uuid())
  rootPath            String
  name                String?
  createdAt           DateTime              @default(now())
  permissions         Int                   @default(0)
  restrictionModifier RestrictionModifier[]

  userRestrictions UserRestriction[]
}

model UserRestriction {
  userId        Int
  restrictionId String
  restriction   Restriction @relation(fields: [restrictionId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@id([userId, restrictionId])
}

model RestrictionModifier {
  id             String      @id @default(uuid())
  restriction    Restriction @relation(fields: [restrictionId], references: [id])
  restrictionId  String
  newPermissions Int         @default(0)
  modifyDate     DateTime?
}

model Log {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  message   String
  level     String
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Metric {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  durationMs Float
  name       String
}

model Scheduler {
  id      Int       @id @default(autoincrement())
  jobName String
  lastRun DateTime?

  reccurence Int
  unit       TimeUnit
}

model Video {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  fullPath  String
  cdnKey    String
  status    String
}
